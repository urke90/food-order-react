{"ast":null,"code":"var _jsxFileName = \"/home/uros/Desktop/uros/food-order-app/client/src/components/store/CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { ADD_ITEM, REMOVE_ITEM } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  let updatedTotalAmount;\n  let existingItemIndex;\n  let existingItem;\n  let updatedItems;\n\n  switch (action.type) {\n    case ADD_ITEM:\n      updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n      existingItemIndex = state.items.findIndex(el => el.id === action.item.id);\n      existingItem = state.items[existingItemIndex];\n\n      if (existingItem) {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount + action.item.amount\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.concat(action.item);\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n\n    case REMOVE_ITEM:\n      existingItemIndex = state.items.findIndex(el => el.id === action.id);\n      existingItem = state.items[existingItemIndex];\n      updatedTotalAmount = state.totalAmount - existingItem.price;\n\n      if (existingItem.amount > 1) {\n        const updatedItem = { ...existingItem,\n          amount: existingItem.amount - 1\n        };\n        updatedItems = [...state.items];\n        updatedItems[existingItemIndex] = updatedItem;\n      } else {\n        updatedItems = state.items.filter(el => el.id !== action.id);\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: updatedTotalAmount\n      };\n\n    default:\n      return initState;\n  }\n};\n\nconst CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, initState);\n\n  const addItemHandler = item => {\n    dispatchCartAction({\n      type: ADD_ITEM,\n      item\n    });\n  };\n\n  const removeItemHandler = id => {\n    dispatchCartAction({\n      type: REMOVE_ITEM,\n      id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"gPL3szej89EP4KQ49093s8E5Iv4=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/uros/Desktop/uros/food-order-app/client/src/components/store/CartProvider.js"],"names":["useReducer","CartContext","ADD_ITEM","REMOVE_ITEM","initState","items","totalAmount","cartReducer","state","action","updatedTotalAmount","existingItemIndex","existingItem","updatedItems","type","item","price","amount","findIndex","el","id","updatedItem","concat","filter","CartProvider","children","cartState","dispatchCartAction","addItemHandler","removeItemHandler","cartContext","addItem","removeItem"],"mappings":"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","sourcesContent":["import { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { ADD_ITEM, REMOVE_ITEM } from './constants';\n\nconst initState = {\n    items: [],\n    totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n    let updatedTotalAmount;\n    let existingItemIndex;\n    let existingItem;\n    let updatedItems;\n    switch (action.type) {\n        case ADD_ITEM:\n            updatedTotalAmount =\n                state.totalAmount + action.item.price * action.item.amount;\n\n            existingItemIndex = state.items.findIndex(\n                (el) => el.id === action.item.id\n            );\n            existingItem = state.items[existingItemIndex];\n\n            if (existingItem) {\n                const updatedItem = {\n                    ...existingItem,\n                    amount: existingItem.amount + action.item.amount\n                };\n\n                updatedItems = [...state.items];\n                updatedItems[existingItemIndex] = updatedItem;\n            } else {\n                updatedItems = state.items.concat(action.item);\n            }\n\n            return {\n                items: updatedItems,\n                totalAmount: updatedTotalAmount\n            };\n        case REMOVE_ITEM:\n            existingItemIndex = state.items.findIndex(\n                (el) => el.id === action.id\n            );\n            existingItem = state.items[existingItemIndex];\n            updatedTotalAmount = state.totalAmount - existingItem.price;\n\n            if (existingItem.amount > 1) {\n                const updatedItem = {\n                    ...existingItem,\n                    amount: existingItem.amount - 1\n                };\n                updatedItems = [...state.items];\n                updatedItems[existingItemIndex] = updatedItem;\n            } else {\n                updatedItems = state.items.filter((el) => el.id !== action.id);\n            }\n\n            return {\n                items: updatedItems,\n                totalAmount: updatedTotalAmount\n            };\n        default:\n            return initState;\n    }\n};\n\nconst CartProvider = ({ children }) => {\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, initState);\n\n    const addItemHandler = (item) => {\n        dispatchCartAction({ type: ADD_ITEM, item });\n    };\n\n    const removeItemHandler = (id) => {\n        dispatchCartAction({ type: REMOVE_ITEM, id });\n    };\n\n    const cartContext = {\n        items: cartState.items,\n        totalAmount: cartState.totalAmount,\n        addItem: addItemHandler,\n        removeItem: removeItemHandler\n    };\n\n    return (\n        <CartContext.Provider value={cartContext}>\n            {children}\n        </CartContext.Provider>\n    );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}